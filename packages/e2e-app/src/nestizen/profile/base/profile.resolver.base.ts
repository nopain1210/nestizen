/*
------------------------------------------------------------------------------
WARNING:
This file is auto-generated by @nestizen/graphql-plugin.
Changes to this file will be lost if the code is regenerated.
------------------------------------------------------------------------------
*/
/* eslint-disable */

import {
  Resolver,
  Query,
  Mutation,
  Args,
  Int,
  Parent,
  ResolveField,
} from '@nestjs/graphql';
import { ProfileServiceBase } from './profile.service.base';
import {
  Profile,
  FindUniqueProfileArgs,
  FindManyProfileArgs,
  CreateOneProfileArgs,
  UpdateOneProfileArgs,
  DeleteOneProfileArgs,
  AggregateProfile,
  ProfileAggregateArgs,
  ProfileGroupBy,
  ProfileGroupByArgs,
  User,
} from '../../nestizen/graphql-types';

@Resolver(() => Profile)
export class ProfileResolverBase {
  constructor(public readonly service: ProfileServiceBase) {}

  @Query(() => Profile, { nullable: true })
  async profile(@Args() args: FindUniqueProfileArgs) {
    return this.service.findUnique(args);
  }

  @Query(() => [Profile], { nullable: false })
  async profiles(@Args() args: FindManyProfileArgs) {
    return this.service.findMany(args);
  }

  @Mutation(() => Profile, { nullable: false })
  async createProfile(@Args() args: CreateOneProfileArgs) {
    return this.service.create(args);
  }

  @Mutation(() => Profile, { nullable: false })
  async updateProfile(@Args() args: UpdateOneProfileArgs) {
    return this.service.update(args);
  }

  @Mutation(() => Profile, { nullable: false })
  async deleteProfile(@Args() args: DeleteOneProfileArgs) {
    return this.service.delete(args);
  }

  @Query(() => Int, { nullable: false })
  async profileCount(@Args() args: FindManyProfileArgs) {
    return this.service.count(args);
  }

  @Query(() => AggregateProfile, { nullable: false })
  async profileAggregate(@Args() args: ProfileAggregateArgs) {
    return this.service.aggregate(args);
  }

  @Query(() => [ProfileGroupBy], { nullable: false })
  async profileGroupBy(@Args() args: ProfileGroupByArgs) {
    return this.service.groupBy(args);
  }

  @ResolveField(() => User)
  async user(@Parent() parent: Profile) {
    return this.service.resolveUser(parent);
  }
}
