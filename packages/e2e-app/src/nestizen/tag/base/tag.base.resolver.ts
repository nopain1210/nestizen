// This file is generated by @nestizen/graphql-plugin. DO NOT MANUALLY EDIT!
/* eslint-disable */
import {
  Query,
  Mutation,
  Args,
  Resolver,
  Int,
  ResolveField,
  Parent,
} from '@nestjs/graphql';
import { TagBaseService } from './tag.base.service';
import { Prisma } from '@prisma/client';
import {
  AggregateTag,
  TagAggregateArgs,
  AffectedRowsOutput,
  TagCreateManyArgs,
  TagDeleteManyArgs,
  Tag,
  TagFindFirstArgs,
  TagFindManyArgs,
  TagFindUniqueArgs,
  TagGroupByOutputType,
  TagGroupByArgs,
  TagUpdateManyArgs,
  TagCountArgs,
  User,
  UserFindManyArgs,
} from '../../nestizen/graphql-types';

@Resolver(() => Tag)
export class TagBaseResolver {
  constructor(protected readonly service: TagBaseService) {}

  @Query(() => AggregateTag, { nullable: false })
  async aggregateTag(@Args() args: TagAggregateArgs) {
    return this.service.aggregate(args as unknown as Prisma.TagAggregateArgs);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async createManyTag(@Args() args: TagCreateManyArgs) {
    return this.service.createMany(args as unknown as Prisma.TagCreateManyArgs);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteManyTag(@Args() args: TagDeleteManyArgs) {
    return this.service.deleteMany(args as unknown as Prisma.TagDeleteManyArgs);
  }

  @Query(() => Tag, { nullable: true })
  async findFirstTag(@Args() args: TagFindFirstArgs) {
    return this.service.findFirst(args as unknown as Prisma.TagFindFirstArgs);
  }

  @Query(() => [Tag], { nullable: false })
  async findManyTag(@Args() args: TagFindManyArgs) {
    return this.service.findMany(args as unknown as Prisma.TagFindManyArgs);
  }

  @Query(() => Tag, { nullable: true })
  async findUniqueTag(@Args() args: TagFindUniqueArgs) {
    return this.service.findUnique(args as unknown as Prisma.TagFindUniqueArgs);
  }

  @Query(() => [TagGroupByOutputType], { nullable: false })
  async groupByTag(@Args() args: TagGroupByArgs) {
    return this.service.groupBy(args as unknown as Prisma.TagGroupByArgs);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async updateManyTag(@Args() args: TagUpdateManyArgs) {
    return this.service.updateMany(args as unknown as Prisma.TagUpdateManyArgs);
  }

  @Query(() => Int, { nullable: false })
  async countTag(@Args() args: TagCountArgs) {
    return this.service.count(args as unknown as Prisma.TagCountArgs);
  }

  @ResolveField(() => User, { nullable: false })
  async users(@Parent() parent: Tag, @Args() args: UserFindManyArgs) {
    return this.service.users(
      parent,
      args as unknown as Prisma.UserFindManyArgs,
    );
  }
}
