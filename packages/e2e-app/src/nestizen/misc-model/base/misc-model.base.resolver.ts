// This file is generated by @nestizen/graphql-plugin. DO NOT MANUALLY EDIT!
/* eslint-disable */
import { Query, Mutation, Args, Resolver, Int } from '@nestjs/graphql';
import { MiscModelBaseService } from './misc-model.base.service';
import { Prisma } from '@prisma/client';
import {
  AggregateMiscModel,
  MiscModelAggregateArgs,
  AffectedRowsOutput,
  MiscModelCreateManyArgs,
  MiscModelDeleteManyArgs,
  MiscModel,
  MiscModelFindFirstArgs,
  MiscModelFindManyArgs,
  MiscModelFindUniqueArgs,
  MiscModelGroupByOutputType,
  MiscModelGroupByArgs,
  MiscModelUpdateManyArgs,
  MiscModelCountArgs,
} from '../../nestizen/graphql-types';

@Resolver(() => MiscModel)
export class MiscModelBaseResolver {
  constructor(protected readonly service: MiscModelBaseService) {}

  @Query(() => AggregateMiscModel, { nullable: false })
  async aggregateMiscModel(@Args() args: MiscModelAggregateArgs) {
    return this.service.aggregate(
      args as unknown as Prisma.MiscModelAggregateArgs,
    );
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async createManyMiscModel(@Args() args: MiscModelCreateManyArgs) {
    return this.service.createMany(
      args as unknown as Prisma.MiscModelCreateManyArgs,
    );
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteManyMiscModel(@Args() args: MiscModelDeleteManyArgs) {
    return this.service.deleteMany(
      args as unknown as Prisma.MiscModelDeleteManyArgs,
    );
  }

  @Query(() => MiscModel, { nullable: true })
  async findFirstMiscModel(@Args() args: MiscModelFindFirstArgs) {
    return this.service.findFirst(
      args as unknown as Prisma.MiscModelFindFirstArgs,
    );
  }

  @Query(() => [MiscModel], { nullable: false })
  async findManyMiscModel(@Args() args: MiscModelFindManyArgs) {
    return this.service.findMany(
      args as unknown as Prisma.MiscModelFindManyArgs,
    );
  }

  @Query(() => MiscModel, { nullable: true })
  async findUniqueMiscModel(@Args() args: MiscModelFindUniqueArgs) {
    return this.service.findUnique(
      args as unknown as Prisma.MiscModelFindUniqueArgs,
    );
  }

  @Query(() => [MiscModelGroupByOutputType], { nullable: false })
  async groupByMiscModel(@Args() args: MiscModelGroupByArgs) {
    return this.service.groupBy(args as unknown as Prisma.MiscModelGroupByArgs);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async updateManyMiscModel(@Args() args: MiscModelUpdateManyArgs) {
    return this.service.updateMany(
      args as unknown as Prisma.MiscModelUpdateManyArgs,
    );
  }

  @Query(() => Int, { nullable: false })
  async countMiscModel(@Args() args: MiscModelCountArgs) {
    return this.service.count(args as unknown as Prisma.MiscModelCountArgs);
  }
}
