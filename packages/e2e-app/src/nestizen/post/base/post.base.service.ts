// This file is generated by @nestizen/graphql-plugin. DO NOT MANUALLY EDIT!
/* eslint-disable */
import { Injectable } from '@nestjs/common';
import { Prisma, Post } from '@prisma/client';
import { PrismaService } from '../../../prisma/prisma.service';

@Injectable()
export class PostBaseService {
  constructor(protected readonly prisma: PrismaService) {}

  async aggregate(args: Prisma.PostAggregateArgs) {
    return this.prisma.client.post.aggregate(args);
  }

  async createMany(args: Prisma.PostCreateManyArgs) {
    return this.prisma.client.post.createMany(args);
  }

  async deleteMany(args: Prisma.PostDeleteManyArgs) {
    return this.prisma.client.post.deleteMany(args);
  }

  async findFirst(args: Prisma.PostFindFirstArgs) {
    return this.prisma.client.post.findFirst(args);
  }

  async findMany(args: Prisma.PostFindManyArgs) {
    return this.prisma.client.post.findMany(args);
  }

  async findUnique(args: Prisma.PostFindUniqueArgs) {
    return this.prisma.client.post.findUnique(args);
  }

  async groupBy(args: Prisma.PostGroupByArgs) {
    return this.prisma.client.post.groupBy(args);
  }

  async updateMany(args: Prisma.PostUpdateManyArgs) {
    return this.prisma.client.post.updateMany(args);
  }

  async count(args: Prisma.PostCountArgs) {
    return this.prisma.client.post.count(args);
  }

  async author(parent: Post) {
    return this.prisma.client.post
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .author();
  }

  async anotherAuthor(parent: Post) {
    return this.prisma.client.post
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .anotherAuthor();
  }

  async categories(parent: Post, args: Prisma.CategoryFindManyArgs) {
    return this.prisma.client.post
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .categories(args);
  }
}
