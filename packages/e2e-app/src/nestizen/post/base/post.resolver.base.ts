/**
 * -----------------------------------------------------------------------------
 * WARNING:
 * This file is auto-generated by @nestizen/graphql-plugin.
 * Changes to this file will be lost if the code is regenerated.
 * -----------------------------------------------------------------------------
 */

/* eslint-disable */
import {
  Resolver,
  Query,
  Mutation,
  Args,
  Int,
  Parent,
  ResolveField,
} from '@nestjs/graphql';
import { PostServiceBase } from './post.service.base';
import {
  Post,
  FindUniquePostArgs,
  FindManyPostArgs,
  CreateOnePostArgs,
  UpdateOnePostArgs,
  DeleteOnePostArgs,
  AggregatePost,
  PostAggregateArgs,
  User,
  FindManyCategoryArgs,
  Category,
} from '../../nestizen/graphql-types';

@Resolver(() => Post)
export class PostResolverBase {
  constructor(public readonly service: PostServiceBase) {}

  @Query(() => Post, { nullable: true })
  async post(@Args() args: FindUniquePostArgs) {
    return this.service.findUnique(args as any);
  }

  @Query(() => [Post], { nullable: false })
  async posts(@Args() args: FindManyPostArgs) {
    return this.service.findMany(args as any);
  }

  @Mutation(() => Post, { nullable: false })
  async createPost(@Args() args: CreateOnePostArgs) {
    return this.service.create(args as any);
  }

  @Mutation(() => Post, { nullable: false })
  async updatePost(@Args() args: UpdateOnePostArgs) {
    return this.service.update(args as any);
  }

  @Mutation(() => Post, { nullable: false })
  async deletePost(@Args() args: DeleteOnePostArgs) {
    return this.service.delete(args as any);
  }

  @Query(() => Int, { nullable: false })
  async postCount(@Args() args: FindManyPostArgs) {
    return this.service.count(args as any);
  }

  @Query(() => AggregatePost, { nullable: false })
  async postAggregate(@Args() args: PostAggregateArgs) {
    return this.service.aggregate(args as any);
  }

  @ResolveField(() => User)
  async author(@Parent() parent: Post) {
    return this.service.resolveAuthor(parent);
  }

  @ResolveField(() => User)
  async anotherAuthor(@Parent() parent: Post) {
    return this.service.resolveAnotherAuthor(parent);
  }

  @ResolveField(() => [Category], { nullable: false })
  async categories(@Parent() parent: Post, @Args() args: FindManyCategoryArgs) {
    return this.service.resolveCategories(parent, args as any);
  }
}
