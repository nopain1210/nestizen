// This file is generated by @nestizen/graphql-plugin. DO NOT MANUALLY EDIT!
/* eslint-disable */
import {
  Query,
  Mutation,
  Args,
  Resolver,
  Int,
  ResolveField,
  Parent,
} from '@nestjs/graphql';
import { PostBaseService } from './post.base.service';
import { Prisma } from '@prisma/client';
import {
  AggregatePost,
  PostAggregateArgs,
  AffectedRowsOutput,
  PostCreateManyArgs,
  PostDeleteManyArgs,
  Post,
  PostFindFirstArgs,
  PostFindManyArgs,
  PostFindUniqueArgs,
  PostGroupByOutputType,
  PostGroupByArgs,
  PostUpdateManyArgs,
  PostCountArgs,
  User,
  Category,
  CategoryFindManyArgs,
} from '../../nestizen/graphql-types';

@Resolver(() => Post)
export class PostBaseResolver {
  constructor(protected readonly service: PostBaseService) {}

  @Query(() => AggregatePost, { nullable: false })
  async aggregatePost(@Args() args: PostAggregateArgs) {
    return this.service.aggregate(args as unknown as Prisma.PostAggregateArgs);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async createManyPost(@Args() args: PostCreateManyArgs) {
    return this.service.createMany(
      args as unknown as Prisma.PostCreateManyArgs,
    );
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteManyPost(@Args() args: PostDeleteManyArgs) {
    return this.service.deleteMany(
      args as unknown as Prisma.PostDeleteManyArgs,
    );
  }

  @Query(() => Post, { nullable: true })
  async findFirstPost(@Args() args: PostFindFirstArgs) {
    return this.service.findFirst(args as unknown as Prisma.PostFindFirstArgs);
  }

  @Query(() => [Post], { nullable: false })
  async findManyPost(@Args() args: PostFindManyArgs) {
    return this.service.findMany(args as unknown as Prisma.PostFindManyArgs);
  }

  @Query(() => Post, { nullable: true })
  async findUniquePost(@Args() args: PostFindUniqueArgs) {
    return this.service.findUnique(
      args as unknown as Prisma.PostFindUniqueArgs,
    );
  }

  @Query(() => [PostGroupByOutputType], { nullable: false })
  async groupByPost(@Args() args: PostGroupByArgs) {
    return this.service.groupBy(args as unknown as Prisma.PostGroupByArgs);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async updateManyPost(@Args() args: PostUpdateManyArgs) {
    return this.service.updateMany(
      args as unknown as Prisma.PostUpdateManyArgs,
    );
  }

  @Query(() => Int, { nullable: false })
  async countPost(@Args() args: PostCountArgs) {
    return this.service.count(args as unknown as Prisma.PostCountArgs);
  }

  @ResolveField(() => User, { nullable: false })
  async author(@Parent() parent: Post) {
    return this.service.author(parent);
  }

  @ResolveField(() => User, { nullable: false })
  async anotherAuthor(@Parent() parent: Post) {
    return this.service.anotherAuthor(parent);
  }

  @ResolveField(() => Category, { nullable: false })
  async categories(@Parent() parent: Post, @Args() args: CategoryFindManyArgs) {
    return this.service.categories(
      parent,
      args as unknown as Prisma.CategoryFindManyArgs,
    );
  }
}
