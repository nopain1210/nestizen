// This file is generated by @nestizen/graphql-plugin. DO NOT MANUALLY EDIT!
/* eslint-disable */
import {
  Query,
  Mutation,
  Args,
  Resolver,
  Int,
  ResolveField,
  Parent,
} from '@nestjs/graphql';
import { CategoryBaseService } from './category.base.service';
import { Prisma } from '@prisma/client';
import {
  AggregateCategory,
  CategoryAggregateArgs,
  AffectedRowsOutput,
  CategoryCreateManyArgs,
  CategoryDeleteManyArgs,
  Category,
  CategoryFindFirstArgs,
  CategoryFindManyArgs,
  CategoryFindUniqueArgs,
  CategoryGroupByOutputType,
  CategoryGroupByArgs,
  CategoryUpdateManyArgs,
  CategoryCountArgs,
  Post,
  PostFindManyArgs,
  CategoryMetadata,
} from '../../nestizen/graphql-types';

@Resolver(() => Category)
export class CategoryBaseResolver {
  constructor(protected readonly service: CategoryBaseService) {}

  @Query(() => AggregateCategory, { nullable: false })
  async aggregateCategory(@Args() args: CategoryAggregateArgs) {
    return this.service.aggregate(
      args as unknown as Prisma.CategoryAggregateArgs,
    );
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async createManyCategory(@Args() args: CategoryCreateManyArgs) {
    return this.service.createMany(
      args as unknown as Prisma.CategoryCreateManyArgs,
    );
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteManyCategory(@Args() args: CategoryDeleteManyArgs) {
    return this.service.deleteMany(
      args as unknown as Prisma.CategoryDeleteManyArgs,
    );
  }

  @Query(() => Category, { nullable: true })
  async findFirstCategory(@Args() args: CategoryFindFirstArgs) {
    return this.service.findFirst(
      args as unknown as Prisma.CategoryFindFirstArgs,
    );
  }

  @Query(() => [Category], { nullable: false })
  async findManyCategory(@Args() args: CategoryFindManyArgs) {
    return this.service.findMany(
      args as unknown as Prisma.CategoryFindManyArgs,
    );
  }

  @Query(() => Category, { nullable: true })
  async findUniqueCategory(@Args() args: CategoryFindUniqueArgs) {
    return this.service.findUnique(
      args as unknown as Prisma.CategoryFindUniqueArgs,
    );
  }

  @Query(() => [CategoryGroupByOutputType], { nullable: false })
  async groupByCategory(@Args() args: CategoryGroupByArgs) {
    return this.service.groupBy(args as unknown as Prisma.CategoryGroupByArgs);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async updateManyCategory(@Args() args: CategoryUpdateManyArgs) {
    return this.service.updateMany(
      args as unknown as Prisma.CategoryUpdateManyArgs,
    );
  }

  @Query(() => Int, { nullable: false })
  async countCategory(@Args() args: CategoryCountArgs) {
    return this.service.count(args as unknown as Prisma.CategoryCountArgs);
  }

  @ResolveField(() => Post, { nullable: false })
  async posts(@Parent() parent: Category, @Args() args: PostFindManyArgs) {
    return this.service.posts(
      parent,
      args as unknown as Prisma.PostFindManyArgs,
    );
  }

  @ResolveField(() => CategoryMetadata, { nullable: true })
  async metadata(@Parent() parent: Category) {
    return this.service.metadata(parent);
  }
}
