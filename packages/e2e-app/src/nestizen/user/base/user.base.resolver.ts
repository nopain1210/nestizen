// This file is generated by @nestizen/graphql-plugin. DO NOT MANUALLY EDIT!
/* eslint-disable */
import {
  Query,
  Mutation,
  Args,
  Resolver,
  Int,
  ResolveField,
  Parent,
} from '@nestjs/graphql';
import { UserBaseService } from './user.base.service';
import { Prisma } from '@prisma/client';
import {
  AggregateUser,
  UserAggregateArgs,
  AffectedRowsOutput,
  UserCreateManyArgs,
  UserDeleteManyArgs,
  User,
  UserFindFirstArgs,
  UserFindManyArgs,
  UserFindUniqueArgs,
  UserGroupByOutputType,
  UserGroupByArgs,
  UserUpdateManyArgs,
  UserCountArgs,
  Post,
  PostFindManyArgs,
  Tag,
  TagFindManyArgs,
} from '../../nestizen/graphql-types';

@Resolver(() => User)
export class UserBaseResolver {
  constructor(protected readonly service: UserBaseService) {}

  @Query(() => AggregateUser, { nullable: false })
  async aggregateUser(@Args() args: UserAggregateArgs) {
    return this.service.aggregate(args as unknown as Prisma.UserAggregateArgs);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async createManyUser(@Args() args: UserCreateManyArgs) {
    return this.service.createMany(
      args as unknown as Prisma.UserCreateManyArgs,
    );
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteManyUser(@Args() args: UserDeleteManyArgs) {
    return this.service.deleteMany(
      args as unknown as Prisma.UserDeleteManyArgs,
    );
  }

  @Query(() => User, { nullable: true })
  async findFirstUser(@Args() args: UserFindFirstArgs) {
    return this.service.findFirst(args as unknown as Prisma.UserFindFirstArgs);
  }

  @Query(() => [User], { nullable: false })
  async findManyUser(@Args() args: UserFindManyArgs) {
    return this.service.findMany(args as unknown as Prisma.UserFindManyArgs);
  }

  @Query(() => User, { nullable: true })
  async findUniqueUser(@Args() args: UserFindUniqueArgs) {
    return this.service.findUnique(
      args as unknown as Prisma.UserFindUniqueArgs,
    );
  }

  @Query(() => [UserGroupByOutputType], { nullable: false })
  async groupByUser(@Args() args: UserGroupByArgs) {
    return this.service.groupBy(args as unknown as Prisma.UserGroupByArgs);
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async updateManyUser(@Args() args: UserUpdateManyArgs) {
    return this.service.updateMany(
      args as unknown as Prisma.UserUpdateManyArgs,
    );
  }

  @Query(() => Int, { nullable: false })
  async countUser(@Args() args: UserCountArgs) {
    return this.service.count(args as unknown as Prisma.UserCountArgs);
  }

  @ResolveField(() => Post, { nullable: false })
  async posts(@Parent() parent: User, @Args() args: PostFindManyArgs) {
    return this.service.posts(
      parent,
      args as unknown as Prisma.PostFindManyArgs,
    );
  }

  @ResolveField(() => User, { nullable: true })
  async parent(@Parent() parent: User) {
    return this.service.parent(parent);
  }

  @ResolveField(() => User, { nullable: false })
  async children(@Parent() parent: User, @Args() args: UserFindManyArgs) {
    return this.service.children(
      parent,
      args as unknown as Prisma.UserFindManyArgs,
    );
  }

  @ResolveField(() => Post, { nullable: false })
  async anotherPosts(@Parent() parent: User, @Args() args: PostFindManyArgs) {
    return this.service.anotherPosts(
      parent,
      args as unknown as Prisma.PostFindManyArgs,
    );
  }

  @ResolveField(() => Tag, { nullable: false })
  async tags(@Parent() parent: User, @Args() args: TagFindManyArgs) {
    return this.service.tags(parent, args as unknown as Prisma.TagFindManyArgs);
  }
}
