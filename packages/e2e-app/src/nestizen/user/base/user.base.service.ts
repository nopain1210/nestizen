// This file is generated by @nestizen/graphql-plugin. DO NOT MANUALLY EDIT!
/* eslint-disable */
import { Injectable } from '@nestjs/common';
import { Prisma, User } from '@prisma/client';
import { PrismaService } from '../../../prisma/prisma.service';

@Injectable()
export class UserBaseService {
  constructor(protected readonly prisma: PrismaService) {}

  async aggregate(args: Prisma.UserAggregateArgs) {
    return this.prisma.client.user.aggregate(args);
  }

  async createMany(args: Prisma.UserCreateManyArgs) {
    return this.prisma.client.user.createMany(args);
  }

  async deleteMany(args: Prisma.UserDeleteManyArgs) {
    return this.prisma.client.user.deleteMany(args);
  }

  async findFirst(args: Prisma.UserFindFirstArgs) {
    return this.prisma.client.user.findFirst(args);
  }

  async findMany(args: Prisma.UserFindManyArgs) {
    return this.prisma.client.user.findMany(args);
  }

  async findUnique(args: Prisma.UserFindUniqueArgs) {
    return this.prisma.client.user.findUnique(args);
  }

  async groupBy(args: Prisma.UserGroupByArgs) {
    return this.prisma.client.user.groupBy(args);
  }

  async updateMany(args: Prisma.UserUpdateManyArgs) {
    return this.prisma.client.user.updateMany(args);
  }

  async count(args: Prisma.UserCountArgs) {
    return this.prisma.client.user.count(args);
  }

  async posts(parent: User, args: Prisma.PostFindManyArgs) {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .posts(args);
  }

  async parent(parent: User) {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .parent();
  }

  async children(parent: User, args: Prisma.UserFindManyArgs) {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .children(args);
  }

  async anotherPosts(parent: User, args: Prisma.PostFindManyArgs) {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .anotherPosts(args);
  }

  async tags(parent: User, args: Prisma.TagFindManyArgs) {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .tags(args);
  }

  async profile(parent: User) {
    return this.prisma.client.user
      .findUniqueOrThrow({
        where: {
          id: parent.id,
        },
      })
      .profile();
  }
}
