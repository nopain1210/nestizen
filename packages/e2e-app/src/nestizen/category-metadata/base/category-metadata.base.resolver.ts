// This file is generated by @nestizen/graphql-plugin. DO NOT MANUALLY EDIT!
/* eslint-disable */
import {
  Query,
  Mutation,
  Args,
  Resolver,
  Int,
  ResolveField,
  Parent,
} from '@nestjs/graphql';
import { CategoryMetadataBaseService } from './category-metadata.base.service';
import { Prisma } from '@prisma/client';
import {
  AggregateCategoryMetadata,
  CategoryMetadataAggregateArgs,
  AffectedRowsOutput,
  CategoryMetadataCreateManyArgs,
  CategoryMetadataDeleteManyArgs,
  CategoryMetadata,
  CategoryMetadataFindFirstArgs,
  CategoryMetadataFindManyArgs,
  CategoryMetadataFindUniqueArgs,
  CategoryMetadataGroupByOutputType,
  CategoryMetadataGroupByArgs,
  CategoryMetadataUpdateManyArgs,
  CategoryMetadataCountArgs,
  Category,
} from '../../nestizen/graphql-types';

@Resolver(() => CategoryMetadata)
export class CategoryMetadataBaseResolver {
  constructor(protected readonly service: CategoryMetadataBaseService) {}

  @Query(() => AggregateCategoryMetadata, { nullable: false })
  async aggregateCategoryMetadata(@Args() args: CategoryMetadataAggregateArgs) {
    return this.service.aggregate(
      args as unknown as Prisma.CategoryMetadataAggregateArgs,
    );
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async createManyCategoryMetadata(
    @Args() args: CategoryMetadataCreateManyArgs,
  ) {
    return this.service.createMany(
      args as unknown as Prisma.CategoryMetadataCreateManyArgs,
    );
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async deleteManyCategoryMetadata(
    @Args() args: CategoryMetadataDeleteManyArgs,
  ) {
    return this.service.deleteMany(
      args as unknown as Prisma.CategoryMetadataDeleteManyArgs,
    );
  }

  @Query(() => CategoryMetadata, { nullable: true })
  async findFirstCategoryMetadata(@Args() args: CategoryMetadataFindFirstArgs) {
    return this.service.findFirst(
      args as unknown as Prisma.CategoryMetadataFindFirstArgs,
    );
  }

  @Query(() => [CategoryMetadata], { nullable: false })
  async findManyCategoryMetadata(@Args() args: CategoryMetadataFindManyArgs) {
    return this.service.findMany(
      args as unknown as Prisma.CategoryMetadataFindManyArgs,
    );
  }

  @Query(() => CategoryMetadata, { nullable: true })
  async findUniqueCategoryMetadata(
    @Args() args: CategoryMetadataFindUniqueArgs,
  ) {
    return this.service.findUnique(
      args as unknown as Prisma.CategoryMetadataFindUniqueArgs,
    );
  }

  @Query(() => [CategoryMetadataGroupByOutputType], { nullable: false })
  async groupByCategoryMetadata(@Args() args: CategoryMetadataGroupByArgs) {
    return this.service.groupBy(
      args as unknown as Prisma.CategoryMetadataGroupByArgs,
    );
  }

  @Mutation(() => AffectedRowsOutput, { nullable: false })
  async updateManyCategoryMetadata(
    @Args() args: CategoryMetadataUpdateManyArgs,
  ) {
    return this.service.updateMany(
      args as unknown as Prisma.CategoryMetadataUpdateManyArgs,
    );
  }

  @Query(() => Int, { nullable: false })
  async countCategoryMetadata(@Args() args: CategoryMetadataCountArgs) {
    return this.service.count(
      args as unknown as Prisma.CategoryMetadataCountArgs,
    );
  }

  @ResolveField(() => Category, { nullable: false })
  async category(@Parent() parent: CategoryMetadata) {
    return this.service.category(parent);
  }
}
